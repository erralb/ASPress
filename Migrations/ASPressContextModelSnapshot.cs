// <auto-generated />
using ASPress.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using System;

namespace ASPress.Migrations
{
    [DbContext(typeof(ASPressContext))]
    partial class ASPressContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("ASPress.Models.Comments", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasColumnName("comment");

                    b.Property<string>("Date")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date")
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("VARCHAR(256)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("TINYTEXT");

                    b.Property<long>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_id")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("VARCHAR(16)")
                        .HasDefaultValueSql("'awaiting'");

                    b.HasKey("Id");

                    b.HasIndex("PostId")
                        .HasName("comments.fk_comments_1_idx");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("ASPress.Models.Meta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("key")
                        .HasColumnType("TINYTEXT");

                    b.Property<string>("Model")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("model")
                        .HasColumnType("VARCHAR(45)")
                        .HasDefaultValueSql("'article'");

                    b.Property<long>("ModelId")
                        .HasColumnName("model_id");

                    b.Property<string>("Value")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Model")
                        .HasName("meta.index2");

                    b.ToTable("meta");
                });

            modelBuilder.Entity("ASPress.Models.Posts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<long>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("author_id")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Content")
                        .HasColumnName("content")
                        .HasColumnType("LONGTEXT");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date_created")
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnName("date_modified")
                        .HasColumnType("TIMESTAMP");

                    b.Property<DateTime>("DatePublish")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date_publish")
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasColumnType("VARCHAR(128)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("status")
                        .HasColumnType("VARCHAR(16)")
                        .HasDefaultValueSql("'draft'");

                    b.Property<string>("Summary")
                        .HasColumnName("summary")
                        .HasColumnType("TINYTEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("TINYTEXT");

                    b.Property<string>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("type")
                        .HasColumnType("VARCHAR(64)")
                        .HasDefaultValueSql("'article'");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("TINYTEXT");

                    b.Property<string>("Visibility")
                        .HasColumnName("visibility")
                        .HasColumnType("VARCHAR(16)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasName("posts.fk_posts_1_idx");

                    b.HasIndex("Type")
                        .HasName("posts.type");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("posts");
                });

            modelBuilder.Entity("ASPress.Models.Roles", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("TINYTEXT");

                    b.Property<string>("Permissions")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("permissions")
                        .HasColumnType("LONGTEXT")
                        .HasDefaultValueSql("NULL");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasColumnName("reference")
                        .HasColumnType("VARCHAR(128)");

                    b.HasKey("Id");

                    b.HasIndex("Reference")
                        .IsUnique();

                    b.ToTable("roles");
                });

            modelBuilder.Entity("ASPress.Models.Terms", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<long?>("ImageId")
                        .HasColumnName("image_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("VARCHAR(45)");

                    b.Property<long?>("ParentId")
                        .HasColumnName("parent_id");

                    b.Property<string>("PostType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("post_type")
                        .HasColumnType("VARCHAR(45)")
                        .HasDefaultValueSql("'article'");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("url")
                        .HasColumnType("TINYTEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .HasName("terms.fk_terms_1_idx");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("terms");
                });

            modelBuilder.Entity("ASPress.Models.Users", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("DateCreated")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date_created")
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DateLastLogin")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("date_last_login")
                        .HasColumnType("TIMESTAMP")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("VARCHAR(45)");

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("TINYTEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasColumnType("VARCHAR(128)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnName("username")
                        .HasColumnType("VARCHAR(128)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("users");
                });

            modelBuilder.Entity("ASPress.Models.Comments", b =>
                {
                    b.HasOne("ASPress.Models.Posts", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");
                });

            modelBuilder.Entity("ASPress.Models.Posts", b =>
                {
                    b.HasOne("ASPress.Models.Users", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId");
                });

            modelBuilder.Entity("ASPress.Models.Terms", b =>
                {
                    b.HasOne("ASPress.Models.Terms", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId");
                });
#pragma warning restore 612, 618
        }
    }
}
